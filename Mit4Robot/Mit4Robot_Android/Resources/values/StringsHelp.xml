<?xml version="1.0" encoding="UTF-8" ?>
<resources>
	<string name="txtHelpGeneral">
	Dit is de Open- en Meeloopdag app, waarin je kunt leren programmeren in de programmeertalen die gebruikt worden op ZUYD Hogeschool.
 	Het doel van de app is om zelf een robot te programmeren die allerlei opdrachten dient uit te voeren om een level te halen. Opdrachten zijn bijvoorbeeld:\n
	Koop een brood bij de bakker.\n
	Koop een braadworst bij de slager.\n\n
	Met behulp van simpele instructies, en gebruik van allerlei constructies in je code, kun je de robot deze opdrachten laten uitvoeren.\n\n
	</string>

	<string name="txtHelpFunctions">
	De robot heeft een aantal simpele instructies die uitgevoerd kunnen worden. De volgende instructies zijn beschikbaar:\n\n
	Loop vooruit: de robot beweegt één vakje vooruit.\n
	Draai rechtsom: de robot draait zijn gezicht 90 graden naar rechts. Hij loopt hierbij niet van zijn huidige vakje af.\n
	Kan: controleer of de robot de richting op kan die jij meegeeft aan de functie, door middel van een variabele. Deze functie wordt gebruikt voor meer complexe constructies in je code.
	Pak op: de robot pakt een voorwerp dat jij aangeeft in je variabele op, mits:\n
	Is bij: controleer of de robot bij de winkel staat die jij in je variabele zet. Aan deze waarde moet voldaan zijn, voor je iets op kunt pakken.\n
	</string>

	<string name="txtHelpVariables">
	Variabelen zijn bepaalde objecten met een variabele opslag. Hier kunnen gegevens dynamisch in worden gewijzigd. Zo kunnen wij bijvoorbeeld een variabele genaamd ”banaan” aanmaken met als waarde ”groen”. Dat gaat als volgt:\n\n
	banaan = ”groen”\n\n
	Door dit stukje code wordt de waarde ”groen” opgeslagen in ”banaan”. Als je hierna de waarde van ”banaan” opvraagt, dan krijg je ”groen” terug. De apostrof die voor en achter het woord ”groen” staan geven aan dat het om een string gaat. Een string is als het ware een stuk tekst. Door een apostrof voor en achter de tekst te zetten weet het systeem dat het om een stuk tekst gaat. Dit is van groot belang als je gaat programmeren, want zonder de apostrof denk het systeem dat het om een andere variabele gaat. \n\n
	kleur = ”groen” \n
	banaan = kleur \n\n
	In het voorbeeld hierboven is een variabele gemaakt genaamd ”kleur” met als waarde ”groen”, een string (een regel tekst). Vervolgens wordt nog een variabele genaamd ”banaan” aangemaakt. Deze krijgt als waarde ”kleur”. Omdat hier geen apostrof omheen staan gaat het dus om de variabele genaamd ”kleur” die eerder is aangemaakt. Hierdoor wordt dus de waarde van ”kleur” in de variabele ”banaan” opgeslagen waardoor de waarde van ”banaan” dus ook ”kleur” wordt.\n
	Naast een string kunnen er ook andere dingen worden opgeslagen in variabelen. Je kunt hier bijvoorbeeld ook getallen in opslaan, en hier vervolgens berekeningen mee doen. Je kunt ook de uitkomst van een berekening opslaan in een variabele.\n\n
	getal = 10\n\n
	In bovenstaand voorbeeld wordt een variabele genaamd ”getal” aangemaakt en wordt de waarde 10 hier in gezet. Het valt je misschien op dat er nu geen apostrof om de waarde 10 heen staan. Hierdoor weet de computer dus dat het om een getal gaat. Je kunt wel apostrof om het getal 10 heen zetten, maar dan wordt het opgeslagen als een stuk tekst (string) waarmee geen berekeningen kunnen worden gedaan. \n\n
	getal = 2 * 2\n\n
	Bij dit voorbeeld wordt de variabele genaamd ”getal” gevuld met de waarde van ”2 * 2” ofwel 2 keer 2, dit is dus 4. Hierdoor krijgt de variabele ”getal” de waarde 4. Zo kan dit ook worden gecombineerd met andere variabelen die een getal bevatten. Je zou dus ”getal * 2” kunnen doen en dan krijg je 8 terug, omdat ”getal” 4 bevat.\n
	</string>

	<string name="txtHelpMap">Elk level heeft een map, waarover de robot kan bewegen. Om een level succesvol te voltooien, dien je bepaalde opdrachten uit te voeren. Hiervoor gebruik je de robot; \n
	de robot kent enkele instructies die je kunt gebruiken om hem te laten bewegen. \n
	Op de map zijn verschillende elementen te vinden. Alleen de wegen zijn bewandelbaar; wanneer een robot het commando krijgt om rechtdoor te lopen, wanneer er geen weg is, wordt de code niet uitgevoerd.\n
	Op de wegen zijn verschillende winkels te vinden, die je nodig zult hebben om sommige opdrachten te voltooien.
	</string>

	<string name="txtHelpRoad">Zo ziet een weg uit. Wanneer een weg een bocht maakt, dien je de robot eerst te draaien, voor je verder kunt lopen. Aan weerszijdes van de weg kan een winkel liggen.</string>
	<string name="txtHelpShop">Zo ziet een winkel uit. Elke winkel heeft een apart plaatje op de muren getekend. Hieraan kun je zien wat voor een sort winkel het is, en wat voor producten deze winkel verkoopt.</string>

<!--- language text strings -->
	<string name="txtHelpPython">Python is een high-level programmeertaal. Dit wil zeggen dat het lezen van deze code erg makkelijk is, en dus makkelijk is om onder de knie te krijgen. We gebruiken op de ZUYD Hogeschool in het eerste jaar ook Python. Hierdoor is de keuze gemaakt om Python als eerste te ondersteunen in deze app.\n\n
	Begrippenlijst:\n\n
	item:\n
	een item is een object dat je op dient te pakken als onderdeel van een opdracht.\n\n
	Destination:\n
	een winkel waar je items kunt oppakken.\n\n
	Conditie:\n
	een conditie waaraan voldaan moet worden, voor de daarna volgende functie uitgevoerd word.\n\n
	De Python taal in deze app bevat de volgende syntax:\n\n
	moveForward()\n
	Dit is het commando om de robot vooruit te laten bewegen.\n\n
	rotateRight()\n
	Dit is het commando om de robot rechtsom te laten draaien.\n\n
	pickUp(”item”)\n
	Dit is het commando om een item op te pakken.\n\n
	at(”destination”)\n
	Dit retourneert of je bij de opgegeven bestemming bent.\n\n
	left/right/forward/backward\n
	Controleer of de robot in de opgegeven richting kan bewegen.\n\n
	[variabelenaam] = [waarde]\n
	Dit maakt een variabele aan met de zelf gedefinieerde variabelenaam, en vult de variabele met de waarde achter het =-teken.\n
	Let op: er kan alleen gebruikt gemaakt worden van een string, een int of een bool\n\n
	Bijzondere Constructies:\n\n
	if [conditie]:\n
	Voert de hierna opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin) uit, mits de conditie voldoet.\n\n
	elif [conditie]:\n
	Voert de hierna opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin) uit, mits aan de voorafgaande if of elif niet voldaan is, maar wel aan de conditie in de elif.\n
	Een elif komt alleen voor na een if, of na een andere elif. Er moet altijd begonnen worden met een if; de if mag maar eenmaal voorkomen als er gebruik gemaakt wordt van elif.\n\n
	else:\n
	Voert de hierna opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin) uit, mits aan alle voorafgaande if en elif niet voldaan word.\n\n
	while [conditie]:\n
	Herhaalt de hierna opgegeven acties (beginnend met een nieuwe regel met een spatie in het begin), totdat de conditie niet meer voldoet.\n\n
	for [variabele] in range([startwaarde],[eindwaarde]):\n
	Voert de hierna opgegeven acties uit, zolang de waarde van je gedefinieerde variabele tussen de gespecificeerde begin- en eindwaarde inzit. Elke actie dient op een aparte regel, beginnend met een spatie te worden geschreven.\n\n
	def functienaam():\n
	Aanmaak van een function met een zelf gedefinieerde naam. Elke actie dient op een aparte regel, beginnend met een spatie te worden geschreven. De aanroep van je functie gaat als volgt:\n
	functienaam()\n\
	”Nested” constructies:\n
	Een bijzondere constructie in een andere bijzondere constructie. Hierdoor automatiseer je repetetieve acties, zodat je minder code hoeft te schrijven om een reeks acties uit te voeren.\n\n
	Operators:\n
	Operators zijn mutaties die je kunt uitvoeren op variabelen. Keer, delen door, plus en min zijn voorbeelden van operators.\n\n
	Relational operators:\n
	Dit zijn mutaties, in de vorm van ”=” (gelijk aan), ”[” (kleiner dan) of ”]” (groter dan). Deze moeten gebruikt worden wanneer je twee of meerdere variabelen of waardes met elkaar wilt vergelijken.\n\nLogical operators: Dit zijn mutaties, in de vorm van ”and” (en), ”or” (of) en ”not” (niet). Deze moeten gebruikt worden wanneer er op meerdere condities (of variabalen) moet gecontroleerd worden in je constructies.\n\n
	Voorrangsregels:\n
	voorrangsregels (zoals in de wiskunde) kunnen toegepast worden in je code, om bepaalde controles op condities voor te laten gaan op anderen. Zo kun je bijvoorbeeld eerst controleren of A en B kloppen, voor je dit vergelijks met C. Haakjes werken precies zoals in de wiskunde: alles wat hiertussen staat wordt als eerste uitgevoerd.\n\n
	Voorrangsregeld Relational operators:\nNa haakjes volgen de ”=”, ”[” en ”]”. Deze hebben geen voorrang op elkaar, en worden dus van links naar rechts uitgevoerd (tenzij ze tussen haakjes instaan).\n\n
	Voorrangsregels Logical operators:\nNa de relational operators volgt ”not”, dan ”and” en dan ”or”.
	</string>

	<string name="txtHelpPascal">
	Pascal is een historisch beïnvloedde, imperatieve en procedurale programmeertaal, ontworpen als kleinschalige en efficiënte taal om programming practices te ondersteunen, gebruik maken van gestructureerd programmeren en gestructureerde datastructuren.\n\n
	Begrippenlijst:\n\n
	item:\n
	een item is een object dat je op dient te pakken als onderdeel van een opdracht.\n\n
	Destination:\n
	een winkel waar je items kunt oppakken.\n\n
	Conditie:\n
	een conditie waaraan voldaan moet worden, voor de daarna volgende functie uitgevoerd word.\n\n
	De Pascal taal in deze app bevat de volgende syntax:\n\n
	moveForward()\n
	Dit is het commando om de robot vooruit te laten bewegen.\n\n
	rotateRight()\n
	Dit is het commando om de robot rechtsom te laten draaien.\n\n
	pickUp(”item”)\n
	Dit is het commando om een item op te pakken.\n\n
	at(”destination”)\n
	Dit retourneert of je bij de opgegeven bestemming bent.\n\n
	left/right/forward/backward\n
	Controleer of de robot in de opgegeven richting kan bewegen.\n\n
	var [variabelenaam] := [waarde]\n
	Dit maakt een variabele aan met de zelf gedefinieerde variabelenaam, en vult de variabele met de waarde achter het =-teken.\n
	Let op: er kan alleen gebruikt gemaakt worden van een string, een int of een bool\n\n
	Bijzondere Constructies:\n\n
	if [conditie] then\nbegin\nend;\n
	Onder de regel met het if-statement komt eerst ”begin”. Daarna volgen de uit te voeren opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin), en wordt het afgesloten met ”end;”.\n\n
	else if [conditie]:\n
	Voert de hierna opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin) uit, mits aan de voorafgaande if of else if niet voldaan is, maar wel aan de conditie in de else if.\n
	Een else if komt alleen voor na een if, of na een andere else if. Er moet altijd begonnen worden met een if; de if mag maar eenmaal voorkomen als er gebruik gemaakt wordt van else if.\n\n
	else:\n
	Voert de hierna opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin) uit, mits aan alle voorafgaande if en else if niet voldaan word.\n\n
	while [conditie] do\nbegin\nend;\n
	Onder de regel met het while-statement komt eerst ”begin”. Daarna volgen de uit te voeren opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin), en wordt het afgesloten met ”end;”. De opgegeven acties worden herhaald tot de conditie niet meer voldoet.\n\n
	for [variabele]:= [startwaarde] to [eindwaarde] do\nbegin\nend;\n
	Onder de regel met het for-statement komt eerst ”begin”. Daarna volgen de uit te voeren opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin), en wordt het afgesloten met ”end;”. De opgegeven acties worden herhaald tot de opgegeven variabele niet meer tussen de start- en eindwaarde bevindt. De variabele wordt automatisch met 1 verhoogt.\n\n
	procedure [functienaam]();\nbegin\nend;\n
	Aanmaak van een function met een zelf gedefinieerde naam. Onder de regel met de functie declaratie komt eerst ”begin”. Daarna volgen de uit te voeren opgegeven acties (beginnend op een nieuwe regel met een spatie in het begin), en wordt het afgesloten met ”end;”. De aanroep van je functie is als volgt:\n[functienaam]()\n\n
	”Nested” constructies:\n
	Een bijzondere constructie in een andere bijzondere constructie. Hierdoor automatiseer je repetetieve acties, zodat je minder code hoeft te schrijven om een reeks acties uit te voeren.\n\n
	Operators:\n
	Operators zijn mutaties die je kunt uitvoeren op variabelen. Keer, delen door, plus en min zijn voorbeelden van operators.\n
	Relational operators: Dit zijn mutaties, in de vorm van ”=” (gelijk aan), ”[” (kleiner dan) of ”]” (groter dan). Deze moeten gebruikt worden wanneer je twee of meerdere variabelen of waardes met elkaar wilt vergelijken.\n\n
	Logical operators: Dit zijn mutaties, in de vorm van ”and” (en), ”or” (of) en ”not” (niet). Deze moeten gebruikt worden wanneer er op meerdere condities (of variabalen) moet gecontroleerd worden in je constructies.\n\n
	Voorrangsregels:\n
	Voorrangsregels (zoals in de wiskunde) kunnen toegepast worden in je code, om bepaalde controles op condities voor te laten gaan op anderen. Zo kun je bijvoorbeeld eerst controleren of A en B kloppen, voor je dit vergelijks met C. Haakjes werken precies zoals in de wiskunde: alles wat hiertussen staat wordt als eerste uitgevoerd.\n\n
	Voorrangsregeld Relational operators:\nNa haakjes volgen de ”=”, ”[” en ”]”. Deze hebben geen voorrang op elkaar, en worden dus van links naar rechts uitgevoerd (tenzij ze tussen haakjes instaan).\n\n
	Voorrangsregels Logical operators:\nNa de relational operators volgt ”not”, dan ”and” en dan ”or”.
	</string>
</resources>